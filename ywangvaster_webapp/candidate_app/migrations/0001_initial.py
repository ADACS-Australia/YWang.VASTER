# Generated by Django 4.2 on 2024-03-11 08:57

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('png_path', models.FileField(max_length=1024, null=True, upload_to='candidates/')),
                ('gif_path', models.FileField(max_length=1024, null=True, upload_to='candidates/')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('x_pix', models.FloatField(blank=True, null=True, verbose_name='Candidate island central x pixel coordinate')),
                ('y_pix', models.FloatField(blank=True, null=True, verbose_name='Candidate island central pixel coordinate')),
                ('ra_deg', models.FloatField(blank=True, null=True, verbose_name='Candidate island central Right Ascension (deg)')),
                ('dec_deg', models.FloatField(blank=True, null=True, verbose_name='Candidate island central Declination (deg)')),
                ('cent_sep_deg', models.FloatField(blank=True, null=True, verbose_name='Candidate separation from observation central pointing (deg)')),
                ('rad_pix', models.FloatField(blank=True, null=True, verbose_name='Candidate island radius in pixels')),
                ('rad_deg', models.FloatField(blank=True, null=True, verbose_name='Candidate island radius in degrees')),
                ('area_pix', models.FloatField(blank=True, null=True, verbose_name='Candidate island area in pixels^2')),
                ('can_peak_flux', models.FloatField(blank=True, null=True, verbose_name='Candidate peak flux in Jy')),
                ('can_fluence', models.FloatField(blank=True, null=True, verbose_name='Candidate fluence in Jy s')),
                ('can_beam', models.FloatField(blank=True, null=True, verbose_name='Primary beam value at the candidate location')),
                ('can_det_stat', models.FloatField(blank=True, null=True, verbose_name='Candidate detection statistic - arbitrary value returned by filter')),
                ('can_mod_ind', models.IntegerField(blank=True, null=True, verbose_name='Candidate modulation index')),
                ('nks_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Nearest known source name')),
                ('nks_x_pix', models.FloatField(blank=True, null=True, verbose_name='Nearest known source x pixel coordinate in observation')),
                ('nks_y_pix', models.FloatField(blank=True, null=True, verbose_name='Nearest known source y pixel coordinate in observation')),
                ('nks_ra_deg', models.FloatField(blank=True, null=True, verbose_name='Nearest known source Right Ascension (deg)')),
                ('nks_dec_deg', models.FloatField(blank=True, null=True, verbose_name='Nearest known source Declination (deg)')),
                ('nks_flux', models.FloatField(blank=True, null=True, verbose_name='Nearest known source integrated flux density in Jy')),
                ('nks_res', models.FloatField(blank=True, null=True, verbose_name='')),
                ('nks_res_dif', models.FloatField(blank=True, null=True, verbose_name='Nearest known source number of std above mean residual')),
                ('nks_det_stat', models.FloatField(blank=True, null=True, verbose_name='Nearest known source detection statistic - arbitrary value returned by filter')),
                ('nks_sep_pix', models.FloatField(blank=True, null=True, verbose_name='Separation between candidate and known in pixels')),
                ('nks_sep_deg', models.FloatField(blank=True, null=True, verbose_name='Separation between candidate and known in degrees')),
                ('can_nks_flux_rat', models.FloatField(blank=True, null=True, verbose_name='Ratio of candidate and known flux')),
                ('can_nks_is_close', models.BooleanField(null=True, verbose_name='')),
                ('ra_hms', models.CharField(blank=True, max_length=32, null=True, verbose_name='Candidate Right Ascension (HH:MM:SS)')),
                ('dec_dms', models.CharField(blank=True, max_length=32, null=True, verbose_name='Candidate Declination (DD:MM:SS)')),
                ('nks_ra_hms', models.CharField(blank=True, max_length=32, null=True, verbose_name='Nearest known source Right Ascension (HH:MM:SS)')),
                ('nks_dec_dms', models.CharField(blank=True, max_length=32, null=True, verbose_name='Nearest known source Declination (DD:MM:SS)')),
            ],
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Classification')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Short Name')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('observation_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('obsname', models.CharField(blank=True, max_length=128, null=True, verbose_name='Obs name')),
                ('starttime', models.BigIntegerField(verbose_name='Start Time (GPS sec)')),
                ('stoptime', models.BigIntegerField(verbose_name='Stop Time (GPS sec)')),
                ('ra_tile_dec', models.FloatField(blank=True, null=True, verbose_name='RA (deg)')),
                ('dec_tile_dec', models.FloatField(blank=True, null=True, verbose_name='Dec (deg)')),
                ('ra_tile_hms', models.CharField(blank=True, max_length=32, null=True, verbose_name='RA (HH:MM:SS)')),
                ('dec_tile_dms', models.CharField(blank=True, max_length=32, null=True, verbose_name='Dec (DD:MM:SS)')),
                ('projectid', models.CharField(blank=True, max_length=16, null=True)),
                ('azimuth', models.FloatField(blank=True, null=True, verbose_name='Azimuth (deg)')),
                ('elevation', models.FloatField(blank=True, null=True, verbose_name='Elevation (deg)')),
                ('frequency_channels', models.CharField(blank=True, max_length=128, null=True, verbose_name='Frequency Channels (x1.28 MHz)')),
                ('cent_freq', models.FloatField(blank=True, null=True, verbose_name='Centre Frequency (MHz)')),
                ('freq_res', models.IntegerField(blank=True, null=True, verbose_name='Frequency Resolution (KHz)')),
                ('int_time', models.FloatField(blank=True, null=True, verbose_name='Integration Time (s)')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Project name')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='xml_ivorns',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ivorn', models.CharField(max_length=128, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('candidate', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='candidate_app.candidate')),
                ('classification', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='candidate_app.classification')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='rating', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='candidate',
            name='filter',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='candidate', to='candidate_app.filter'),
        ),
        migrations.AddField(
            model_name='candidate',
            name='obs_id',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='candidate', to='candidate_app.observation', verbose_name='Observation ID in GPS time'),
        ),
        migrations.AddField(
            model_name='candidate',
            name='project',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='candidate', to='candidate_app.project'),
        ),
    ]
